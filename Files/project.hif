HIF003
--
-- Copyright (C) 1988-2002 Altera Corporation
-- Any megafunction design, and related net list (encrypted or decrypted),
-- support information, device programming or simulation file, and any other
-- associated documentation or information provided by Altera or a partner
-- under Altera's Megafunction Partnership Program may be used only to
-- program PLD devices (but not masked PLD devices) from Altera.  Any other
-- use of such megafunction design, net list, support information, device
-- programming or simulation file, or any other related documentation or
-- information is prohibited for any other purpose, including, but not
-- limited to modification, reverse engineering, de-compiling, or use with
-- any other silicon devices, unless such use is explicitly licensed under
-- a separate agreement with Altera or a megafunction partner.  Title to
-- the intellectual property, including patents, copyrights, trademarks,
-- trade secrets, or maskworks, embodied in any such megafunction design,
-- net list, support information, device programming or simulation file, or
-- any other related documentation or information provided by Altera or a
-- megafunction partner, remains with Altera, the megafunction partner, or
-- their respective licensors.  No other licenses, including any licenses
-- needed under any third party's intellectual property, are provided herein.
--
-- Warning: do not edit this file!
--
FILES
{
	345.tdf
	{
		345 [USE_LPM_FOR_AHDL_OPERATORS] [lpm_decode.inc];
	}
	srlatch1.gdf
	{
		srlatch1 [] []
		{
			2 [] [];
		}
	}
	decoder24.gdf
	{
		decoder24 [] []
		{
			3 [] [];
		}
	}
	dec.tdf
	{
		dec [USE_LPM_FOR_AHDL_OPERATORS] [lpm_decode.inc];
	}
	srlatch.gdf
	{
		srlatch [] [];
	}
	lpm_decode.tdf
	{
		lpm_decode [DEVICE_FAMILY,CASCADE_CHAIN=MANUAL,LPM_PIPELINE=0,LPM_DECODES,LPM_WIDTH,USE_LPM_FOR_AHDL_OPERATORS] [declut.inc,altshift.inc,lpm_compare.inc,lpm_constant.inc,aglobal.inc];
	}
	altshift.tdf
	{
		altshift [DEPTH=0,WIDTH=4,USE_LPM_FOR_AHDL_OPERATORS] [];
	}
	lpm_compare.tdf
	{
		lpm_compare [DEVICE_FAMILY=FLEX8000,CASCADE_CHAIN_LENGTH=8,CARRY_CHAIN_LENGTH=8,CASCADE_CHAIN=MANUAL,CARRY_CHAIN=MANUAL,ONE_INPUT_IS_CONSTANT=NO,CHAIN_SIZE=8,LPM_PIPELINE=0,LPM_REPRESENTATION=UNSIGNED,lpm_width,USE_LPM_FOR_AHDL_OPERATORS] [comptree.inc,altshift.inc,aglobal.inc];
	}
	comptree.tdf
	{
		comptree [MODE=0,BURRIED_CLOCKED=1,OUTPUTS_CLOCKED=0,ONE_INPUT_CONSTANT=0,CHAIN_LENGTH=8,lpm_width,USE_LPM_FOR_AHDL_OPERATORS] [comptree.inc,cmpchain.inc,lpm_constant.inc];
	}
	cmpchain.tdf
	{
		cmpchain [DEVICE_FAMILY,CASCADE_CHAIN_LENGTH,CARRY_CHAIN_LENGTH,CASCADE_CHAIN,CARRY_CHAIN,MODE,ONE_INPUT_CONSTANT,lpm_width,USE_LPM_FOR_AHDL_OPERATORS] [comptree.inc,aglobal.inc];
	}
	lpm_constant.tdf
	{
		lpm_constant [LPM_CVALUE,LPM_WIDTH,USE_LPM_FOR_AHDL_OPERATORS] [];
	}
}
TREE
{
	project::(0,0):(0): project.gdf
	{
		decoder24:3:(0,0):(43): decoder24.gdf;
		bc::(0,0):(4): bc.gdf
		{
			srlatch1:2:(0,0):(17): srlatch1.gdf;
		}
		bc::(0,0):(7): bc.gdf
		{
			srlatch1:2:(0,0):(17): srlatch1.gdf;
		}
		bc::(0,0):(8): bc.gdf
		{
			srlatch1:2:(0,0):(17): srlatch1.gdf;
		}
		bc::(0,0):(17): bc.gdf
		{
			srlatch1:2:(0,0):(17): srlatch1.gdf;
		}
		bc::(0,0):(13): bc.gdf
		{
			srlatch1:2:(0,0):(17): srlatch1.gdf;
		}
		bc::(0,0):(12): bc.gdf
		{
			srlatch1:2:(0,0):(17): srlatch1.gdf;
		}
		bc::(0,0):(11): bc.gdf
		{
			srlatch1:2:(0,0):(17): srlatch1.gdf;
		}
		bc::(0,0):(16): bc.gdf
		{
			srlatch1:2:(0,0):(17): srlatch1.gdf;
		}
		bc::(0,0):(9): bc.gdf
		{
			srlatch1:2:(0,0):(17): srlatch1.gdf;
		}
		bc::(0,0):(14): bc.gdf
		{
			srlatch1:2:(0,0):(17): srlatch1.gdf;
		}
		bc::(0,0):(6): bc.gdf
		{
			srlatch1:2:(0,0):(17): srlatch1.gdf;
		}
		bc::(0,0):(18): bc.gdf
		{
			srlatch1:2:(0,0):(17): srlatch1.gdf;
		}
		bc::(0,0):(10): bc.gdf
		{
			srlatch1:2:(0,0):(17): srlatch1.gdf;
		}
		bc::(0,0):(5): bc.gdf
		{
			srlatch1:2:(0,0):(17): srlatch1.gdf;
		}
		bc::(0,0):(15): bc.gdf
		{
			srlatch1:2:(0,0):(17): srlatch1.gdf;
		}
		bc::(0,0):(1): bc.gdf
		{
			srlatch1:2:(0,0):(17): srlatch1.gdf;
		}
	}
}
